// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String  @unique
  verified Boolean

  profile  Profile?
  practice Practice?

  cards        Card[]
  lists        List[]
  enrolledList EnrolledList[]
}

model Profile {
  id String @id @default(uuid()) @db.Uuid

  firstName String
  lastName  String

  image String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.Uuid
}

model Practice {
  id String @id @default(uuid()) @db.Uuid

  goal Int
  done Int

  learner   User   @relation(fields: [learnerId], references: [id], onDelete: Cascade)
  learnerId String @unique @db.Uuid
}

enum Pos {
  noun
  verb
  adverb
  adjective
}

model Word {
  id String @id @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lemma String
  pos   Pos

  ipa   String?
  sound String?

  senses Sense[]

  @@unique([lemma, pos])
}

model Sense {
  id String @id @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  definition String

  cards    Card[]
  examples Example[]

  word   Word   @relation(fields: [wordId], references: [id], onDelete: Cascade)
  wordId String @db.Uuid

  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId String @db.Uuid
}

model Example {
  id String @id @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sense   Sense  @relation(fields: [senseId], references: [id], onDelete: Cascade)
  senseId String @db.Uuid
}

model List {
  id String @id @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String
  published   Boolean @default(false)

  senses       Sense[]
  enrolledList EnrolledList[]

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @db.Uuid
}

model EnrolledList {
  enrolledAt DateTime @default(now())

  listId String @db.Uuid
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)

  leanerId String @db.Uuid
  learner  User   @relation(fields: [leanerId], references: [id], onDelete: Cascade)

  @@id([leanerId, listId])
}

model Card {
  createdAt   DateTime @default(now())
  practicedAt DateTime @default(now())

  interval   Int   @default(0)
  repetition Int   @default(0)
  efactor    Float @default(2.5)

  count   Int      @default(0)
  dueDate DateTime @default(now())

  sense   Sense  @relation(fields: [senseId], references: [id], onDelete: Cascade)
  senseId String @db.Uuid

  learner   User   @relation(fields: [learnerId], references: [id], onDelete: Cascade)
  learnerId String @db.Uuid

  @@id([learnerId, senseId])
}
